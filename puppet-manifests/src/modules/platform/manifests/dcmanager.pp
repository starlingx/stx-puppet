class platform::dcmanager::params (
  $api_port = undef,
  $region_name = undef,
  $domain_name = undef,
  $domain_admin = undef,
  $domain_pwd = undef,
  $service_name = 'dcmanager',
  $default_endpoint_type = 'internalURL',
  $service_create = false,
  $deploy_base_dir = '/opt/platform/deploy',
  $iso_base_dir_source = '/opt/platform/iso',
  $iso_base_dir_target = '/var/www/pages/iso',
  $orch_worker_workers = undef,
  $state_workers = undef,
  $audit_worker_workers = undef,
  $rabbit_host = 'localhost',
) {
  include ::platform::params

  include ::platform::network::mgmt::params

  $system_mode = $::platform::params::system_mode

  # FQDN can be used after:
  # - after the bootstrap for any installation
  # - mate controller uses FQDN if mgmt::params::fqdn_ready is present
  #     mate controller can use FQDN before the bootstrap flag
  # - just AIO-SX can use FQDN during the an upgrade. For other installs
  #     the active controller in older release can resolve the .internal FQDN
  #     when the mate controller is updated to N+1 version
  if (!str2bool($::is_upgrade_do_not_use_fqdn) or $system_mode == 'simplex') {
    if (str2bool($::is_bootstrap_completed)) {
      $fqdn_ready = true
    } else {
      if ($::platform::network::mgmt::params::fqdn_ready != undef) {
        $fqdn_ready = $::platform::network::mgmt::params::fqdn_ready
      }
      else {
        $fqdn_ready = false
      }
    }
  }
  else {
    $fqdn_ready = false
  }

  if ($fqdn_ready) {
    $api_host = $::platform::params::controller_fqdn
  } else {
    $api_host = $::platform::network::mgmt::params::controller_address
  }
}


class platform::dcmanager
  inherits ::platform::dcmanager::params {
  if $::platform::params::distributed_cloud_role =='systemcontroller' {
    include ::platform::params
    include ::platform::amqp::params
    include ::platform::network::mgmt::params

    if $::platform::params::init_database {
      include ::dcmanager::db::postgresql
    }

    $system_mode = $::platform::params::system_mode

    # If not defined, worker values can vary from 4 to 8 depending
    # on the number of physical cores and memory available
    if $::platform::dcmanager::params::state_workers == undef {
      $state_workers_value = min($::platform::params::eng_workers_by_2, 8)
    } else {
      $state_workers_value = $::platform::dcmanager::params::state_workers
    }

    if $::platform::dcmanager::params::audit_worker_workers == undef {
      $audit_worker_workers_value = min($::platform::params::eng_workers_by_2, 8)
    } else {
      $audit_worker_workers_value = $::platform::dcmanager::params::audit_worker_workers
    }

    if $::platform::dcmanager::params::orch_worker_workers == undef {
      $orch_worker_workers_value = min($::platform::params::eng_workers_by_2, 4)
    } else {
      $orch_worker_workers_value = $::platform::dcmanager::params::orch_worker_workers
    }

    class { '::dcmanager':
      rabbit_host          => $::platform::dcmanager::params::rabbit_host,
      rabbit_port          => $::platform::amqp::params::port,
      rabbit_userid        => $::platform::amqp::params::auth_user,
      rabbit_password      => $::platform::amqp::params::auth_password,
      state_workers        => $state_workers_value,
      orch_worker_workers  => $orch_worker_workers_value,
      audit_worker_workers => $audit_worker_workers_value,
    }
    file {$iso_base_dir_source:
      ensure => directory,
      mode   => '0755',
    }
    file {$iso_base_dir_target:
      ensure => directory,
      mode   => '0755',
    }
    file {$deploy_base_dir:
      ensure => directory,
      mode   => '0755',
    }

    # Define systemd DropIn override to set default CPUShares and
    # remove CPUQuota.
    $disable_cpu = @("DISABLECPU"/L)
      [Service]
      CPUShares=1024
      CPUQuota=
      CPUQuotaPeriodSec=
      | DISABLECPU

    # Create systemd DropIn overrides files for systemcontroller role
    # and controller personality. This removes CPU cgroup engineering
    # that generally was applied to all nodes. We do not want to affect
    # DC payload on systemcontroller under sm.service and ssh.services.
    # Batch operations require extremely parallel cpu intensive usage
    # of both these cgroups. The dc services currently inherit the
    # sm.service cgroup; the sm.service override is generated by sm.pp.
    # We do not want to affect software API performance.
    # We also remove the settings for services: pmon, sysinv-agent,
    # collectd, fm-api, sm-api, software-controller-daemon,
    # software, sw-patch-controller-daemon.
    # There is no reason to limit their CPUShares on systemcontroller.
    $service_names = [
      'pmon',
      'ssh',
      'sysinv-agent',
      'collectd',
      'fm-api',
      'sm-api',
      'software-controller-daemon',
      'software',
      'sw-patch-controller-daemon'
    ]
    $services = $service_names.map |$var| { "${var}.service" }
    $services_string = join($services, ' ')
    $dirs = $service_names.map |$var| { "/etc/systemd/system/${var}.service.d" }
    $files = $service_names.map |$var| { "/etc/systemd/system/${var}.service.d/${var}-cpu-shares.conf" }

    file { $dirs:
      ensure => 'directory',
      owner  => 'root',
      group  => 'root',
      mode   => '0755',
    }
    -> file { $files:
      ensure  => file,
      content => inline_template($disable_cpu),
      owner   => 'root',
      group   => 'root',
      mode    => '0644',
    }

    # Reload systemd to pick up DropIns
    -> exec { 'systemctl daemon reload - dcmanager overrides':
      command   => 'systemctl daemon-reload',
      logoutput => true,
    }

    # Restart services only if they already running
    -> exec { 'restart services - dcmanager overrides':
      command   => "systemctl try-restart ${services_string}",
      logoutput => true,
    }
  }
}

class platform::dcmanager::haproxy
  inherits ::platform::dcmanager::params {
  include ::platform::params
  include ::platform::haproxy::params

  if $::platform::params::distributed_cloud_role =='systemcontroller' {
    platform::haproxy::proxy { 'dcmanager-restapi':
      server_name  => 's-dcmanager',
      public_port  => $api_port,
      private_port => $api_port,
    }
  }

  # Configure rules for https enabled admin endpoint.
  if $::platform::params::distributed_cloud_role == 'systemcontroller' {
    platform::haproxy::proxy { 'dcmanager-restapi-admin':
      https_ep_type     => 'admin',
      server_name       => 's-dcmanager',
      public_ip_address => $::platform::haproxy::params::private_ip_address,
      public_port       => $api_port + 1,
      private_port      => $api_port,
    }
  }
}

class platform::dcmanager::manager {
  if $::platform::params::distributed_cloud_role =='systemcontroller' {
    include ::dcmanager::manager
  }
}

class platform::dcmanager::api
  inherits ::platform::dcmanager::params {
  if $::platform::params::distributed_cloud_role =='systemcontroller' {
    if ($::platform::dcmanager::params::service_create and
        $::platform::params::init_keystone) {
      include ::dcmanager::keystone::auth
    }

    class { '::dcmanager::api':
      bind_host => $api_host,
      sync_db   => $::platform::params::init_database,
    }


    include ::platform::dcmanager::haproxy
  }
}

class platform::dcmanager::fs::runtime {
  if $::platform::params::distributed_cloud_role == 'systemcontroller' {
    include ::platform::dcmanager::params
    $iso_base_dir_source = $::platform::dcmanager::params::iso_base_dir_source
    $iso_base_dir_target = $::platform::dcmanager::params::iso_base_dir_target
    $deploy_base_dir = $::platform::dcmanager::params::deploy_base_dir

    file {$iso_base_dir_source:
      ensure => directory,
      mode   => '0755',
    }

    file {$iso_base_dir_target:
      ensure => directory,
      mode   => '0755',
    }

    file {$deploy_base_dir:
      ensure => directory,
      mode   => '0755',
    }

    exec { "bind mount ${iso_base_dir_target}":
      command => "mount -o bind -t ext4 ${iso_base_dir_source} ${iso_base_dir_target}",
      require => File[ $iso_base_dir_source, $iso_base_dir_target ]
    }
  }
}

class platform::dcmanager::runtime {
  if $::platform::params::distributed_cloud_role == 'systemcontroller' {
    include ::platform::amqp::params
    include ::dcmanager
    include ::dcmanager::db::postgresql
    class { '::dcmanager::api':
      sync_db   => str2bool($::is_standalone_controller),
    }
  }
}
