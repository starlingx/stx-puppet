#!/bin/bash
#
# Startup script for etcd
#
# chkconfig: 2345 20 80
# description: Starts and stops etcd systemd service

### BEGIN INIT INFO
# Provides: etcd
# Required-Start: $local_fs $network
# Required-Stop: $local_fs
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start up the etcd service
# Description:       A highly-available key value store for shared configuration
### END INIT INFO


DESC="ETCD highly-available key value database"
SERVICE="etcd.service"
PIDFILE="/var/run/etcd.pid"
UPGRADE_SWACT_FILE="/opt/etcd/.upgrade_etcd"

if grep -q "Debian" /etc/os-release; then
    ETCD_CONFIG_FILE="/etc/default/etcd"
elif grep -q "CentOS" /etc/os-release; then
    ETCD_CONFIG_FILE="/etc/etcd/etcd.conf"
fi

if [ ! -f "$ETCD_CONFIG_FILE" ]; then
    logger "$ETCD_CONFIG_FILE: file does not exist"
    exit 1
fi

IFS=', ' read -r -a URLS <<< $(awk -F '=' '/^ETCD_LISTEN_CLIENT_URLS/ {print $2}' ${ETCD_CONFIG_FILE} | tr -d '"')
if [ ${#URLS[@]} -le 0 ]; then
    logger "$0: ETCD_LISTEN_CLIENT_URLS not configured"
    exit 1
fi

ETCD_LISTEN_CLIENT_URL="${URLS[-1]}"


status()
{
    if [[ $ETCD_LISTEN_CLIENT_URL =~ "https" ]]; then
        etcd_health="$(etcdctl --command-timeout=5s --cacert=/etc/etcd/ca.crt --cert=/etc/etcd/etcd-server.crt --key=/etc/etcd/etcd-server.key --endpoints="$ETCD_LISTEN_CLIENT_URL" endpoint health 2>&1)"
    else
        etcd_health="$(etcdctl --command-timeout=5s --endpoints="$ETCD_LISTEN_CLIENT_URL" endpoint health 2>&1 | head -n 1)"
    fi

    # LP: 2033942. In case if the status method is called in between
    # certs are replaced and etcd service is restarted, etcd health call
    # will result negative even though service is running fine.
    # In this case we rely on PID file for the status of the service.
    if [[ $etcd_health =~ "unknown certificate authority" || $etcd_health =~ "broken pipe" ]]; then
        if [ -e $PIDFILE ]; then
            PIDDIR=/proc/$(cat $PIDFILE)
            if [ -d $PIDDIR ]; then
                RETVAL=0
                echo "$DESC is running but invalid certificates detected."
                return
            fi
            echo "$DESC is Not running. Also, invalid certificates detected."
            RETVAL=1
        else
            echo "$DESC is Not running. Also, invalid certificates detected."
            RETVAL=1
        fi
    elif [[ $etcd_health =~ "is healthy" ]]; then
        RETVAL=0
        echo "$DESC is running"
        return
    else
        echo "$DESC is Not running"
        RETVAL=1
    fi
}


start()
{
    if [ -e $PIDFILE ]; then
        PIDDIR=/proc/$(cat $PIDFILE)
        if [ -d $PIDDIR ]; then
            echo "$DESC already running."
            return
        else
            echo "Removing stale PID file $PIDFILE"
            rm -f $PIDFILE
        fi
    fi

    RETVAL=0

    if [ -e $UPGRADE_SWACT_FILE ]; then
        echo "Perform upgrade_swact_migration migrate etcd ..."
        /usr/bin/upgrade_swact_migration.py migrate_etcd
        if [ $? -ne 0 ]
        then
            RETVAL=1
        fi
    fi

    if [ $RETVAL -eq 0 ]; then
        echo "Starting $SERVICE..."

        systemctl start $SERVICE

        if [ $? -eq 0 ]; then
            echo "Started $SERVICE successfully"
        else
            echo "$SERVICE failed!"
            RETVAL=1
        fi
    fi

}

stop()
{
    echo -n "Stopping $SERVICE..."
    systemctl stop $SERVICE
    if [ $? -eq 0 ]; then
        echo "$SERVICE stopped."
    else
        echo "failed to stop $SERVICE!"
    fi

    if [ -e $PIDFILE ]; then
        echo "Removing stale PID file $PIDFILE"
        rm -f $PIDFILE
    fi
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    restart)
        stop
        start
        ;;
    *)
        echo "Usage: $0 {start|stop|status|restart}"
        exit 1
        ;;
esac

exit $RETVAL
